#!/usr/bin/env ruby

require 'flattt'
require 'slop'

BANNER =<<HELP_TEXT
Usage:

flattt new [project_name]
  -- Build a new flatt project in a directory which matches your project name

flattt generate [page|post|coffee|style] 
  -- Generate CMS Sources files for a page, post, coffeescript or scss stylesheet

flattt build [site|html|pages|posts|assets|stylesheets|js]
 -- Convert CMS Source files to flat files which can be served from any static web server.
    site: Build entire site structure 
    html: Build all HTML - pages & posts
    pages: Build HTML for pages only
    posts: Build HTML for posts only
    assets: Build all assets - CSS & Js
    stylesheets: Build CSS
    js: Build Js

flatt [-h|--help]
 -- Print this message
HELP_TEXT

CURRENT_DIRECTORY = Dir.pwd
REQUIRED_DIRS = %w{ source source/pages 
  source/posts source/scripts source/styles 
  site site/posts site/js site/styles templates }

def verify_or_create_required_dirs(root_directory)
  REQUIRED_DIRS.each do |dir| 
    path = File.join(root_directory,dir)
    verify_or_create_dir(path) 
  end
end

def verify_or_create_dir(dir_path)
  puts "[+] creating #{dir_path}"
  Dir.mkdir dir_path
end

def build_new_project name
  project_dir = File.join(CURRENT_DIRECTORY, name)
  puts "[+] Creating new flattt project in #{project_dir}"

  if Dir.exists? project_dir
    puts "[-] Looks like a directory already exists in #{ project_dir} "
    puts "[-] Please choose a different name."
    exit
  end

  Dir.mkdir project_dir
  puts "[+] Creating additional directories:"
  verify_or_create_required_dirs(project_dir)

  puts "[+] Creating Gemfile"
  default_gemfile = "source 'https://rubygems.org'\n\ngem 'flattt', github: 'granolocks/flattt', branch: 'master'"
  target_gemfile  =  File.join(project_dir, "Gemfile")
  File.write(target_gemfile, default_gemfile) 
end

opts = Slop.parse do
  banner "[Usage:] flattt -h for more information."

  on '-h', '--help', 'Print the Usage' do
    #puts "'Ere I am, J. H., the ghost in the machine."
    puts HELP_TEXT
  end

  command 'new' do 
    run do |opts, args|
      name = args[0] || nil
      if name
        build_new_project name
      else
        puts HELP_TEXT
      end
    end
  end

  command 'generate' do 
    run do |opts, args|
      puts "[-] GENERATE - PENDING"
    end
  end
   
  command 'build' do 
    run do |opts, args|
      puts "[-] BUILD - PENDING"
    end 
  end
end

