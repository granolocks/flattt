#!/usr/bin/env ruby


require 'flattt'
require 'slop'
require 'fileutils'

CURRENT_DIRECTORY = Dir.pwd

REQUIRED_DIRS = %w{
                    source source/pages
                    source/posts source/scripts source/styles
                    site site/pages site/posts site/js site/styles
                    layouts
                  }

# This is some frigteningly dark vooodoo which basically
# just converts REQUIRED_DIRS into a nested hash of directories and paths
def required_paths_hash
  output = REQUIRED_DIRS.inject({}) do |coll, path|
    nested_path = path.split "/"
    full_path = File.join(CURRENT_DIRECTORY,path)

    # :C This could be written so much nicer...
    # Must be getting sleepy
    if nested_path.size == 1 # meaning it is a directory
      coll[path.to_sym] = full_path
    else
      # for readbility maybe?
      p0 = nested_path[0].to_sym
      p1 = nested_path[1].to_sym
      if coll[p0].class == String
        coll[p0] = {}
      end
      coll[p0][p1] = full_path
    end
    coll # <3 inject() but should probably use each_with_object()
  end

  # keep pages @ site root >:C
  output[:site][:pages] = File.join(CURRENT_DIRECTORY,"site")
  return output
end
PATHS = required_paths_hash

require File.join(File.expand_path('..',__FILE__),'templates.rb')
require File.join(File.expand_path('..',__FILE__),'helpers.rb')

include Flattt::Bin::Helpers

include Flattt::Generators
include Flattt::Builders
include Flattt::Renderers

opts = Slop.parse do
  banner "[Usage:] flattt -h for more information."

  on '-h', '--help', 'Print the Usage' do
    #puts "'Ere I am, J. H., the ghost in the machine."
    puts HELP_TEXT
  end

  command 'new' do 
    run do |opts, args|
      name = args[0] || nil
      if name
        build_new_project name
      else
        puts HELP_TEXT
      end
    end
  end

  command 'generate' do 
    run do |opts, args|
      verify_flattt_root
      gen_type = args[0] || nil
      if gen_type && %w{ page post coffee style }.include?(gen_type)
        paths = required_paths_hash
        # generate ALL the things!
        case gen_type
        when 'page'
          # page_gen
          puts "Enter page title: "
          title = $stdin.gets.chomp

          puts "[+] Creating page '#{title}'"
          page = Page.new(title, paths[:source][:pages])

          puts "[+] Building page....."
          page.generate!
          puts "[+] done :)"
        when 'post'
          # post_gen
          puts "Enter post title: "
          title = $stdin.gets.chomp
          
          puts "[+] Creating post '#{title}'"
          post = Post.new(title, paths[:source][:posts])

          puts "[+] Building post...."
          post.generate!
          puts "[+] Done :)\n"
        when 'coffee'
          # post_gen
          puts "Enter script title: "
          title = $stdin.gets.chomp
          script_title = string_to_file_path(title) + ".js.coffee" 
          script_path = File.join(PATHS[:source][:scripts], script_title)
          
          puts "[+] Creating empty coffee script..."
          puts "\t -> #{script_path}"

          if File.exists? script_path
            puts "[-] Script already exists. Exiting.\n"
            exit
          end

          FileUtils.touch(script_path)
          puts "[+] Done :)\n"
        when 'style'
          puts "Enter stylesheet title: "
          title = $stdin.gets.chomp
          stylesheet_title = string_to_file_path(title) + ".css.scss" 
          stylesheet_path = File.join(PATHS[:source][:styles], stylesheet_title)
          
          puts "[+] Creating empty scss stylesheet..."
          puts "\t -> #{stylesheet_path}"

          if File.exists? stylesheet_path
            puts "[-] Stylesheet already exists. Exiting.\n"
            exit
          end

          FileUtils.touch(stylesheet_path)
          puts "[+] Done :)\n"
        end
      else
        puts HELP_TEXT
      end
    end
  end
   
  command 'build' do 
    run do |opts, args|
      verify_flattt_root
      build_type = args[0] || nil
      if build_type && %w{ site html pages posts assets stylesheets js }.include?(build_type)
        case build_type
        when "site"
          build_site
        when "html"
          build_html
        when "pages"
          build_pages
        when "posts"
          build_posts
        when "assets"
          build_assets
        when "stylesheets"
          build_stylesheets
        when "js"
          build_js 
        end
      else
        puts HELP_TEXT
      end
    end 
  end
end
